apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            //jni.srcDirs = ['src/main/jni', 'src/main/jni/']
            jniLibs.srcDir 'src/main/libs'
            jni.srcDirs = []
        }

    }
}


//定义一个函数，target是生成jar包的文件名，classDir是class文件所在的文件夹
def makeJar(String target, String classDir) {
    exec {
        executable "jar"   //调用jar
        args "cvf", target
        args "-C", classDir
        args "", "."
    }
}

task clearJar(type: Delete) {
    delete 'hetprotocol.jar'
}

task makeJar(type: Copy) {
    def projectName = getProject().name
    def versionName = android.defaultConfig.versionName
    def appName = "../../${projectName}-${versionName}.jar"
    from('build/intermediates/bundles/release/')
    into('build/outputs/')
    include('classes.jar')
    rename('classes.jar', appName)
//    rename ('classes.jar', '../../hetcoresdk.jar')
}

makeJar.dependsOn(clearJar, build)



dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

ext {
    modulename = rootProject.ext.libsname.hetprotocolsdk
}
apply from: '../upload.gradle'